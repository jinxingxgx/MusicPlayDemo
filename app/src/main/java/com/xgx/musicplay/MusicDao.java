package com.xgx.musicplay;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC".
*/
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "MUSIC";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Singer = new Property(2, String.class, "singer", false, "SINGER");
        public final static Property Album = new Property(3, String.class, "album", false, "ALBUM");
        public final static Property MusicDir = new Property(4, String.class, "musicDir", false, "MUSIC_DIR");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property Sound = new Property(6, int.class, "sound", false, "SOUND");
        public final static Property Playtime = new Property(7, String.class, "playtime", false, "PLAYTIME");
        public final static Property Scantime = new Property(8, String.class, "scantime", false, "SCANTIME");
        public final static Property IsPrize = new Property(9, boolean.class, "isPrize", false, "IS_PRIZE");
        public final static Property AllTimeStr = new Property(10, String.class, "allTimeStr", false, "ALL_TIME_STR");
    }


    public MusicDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"SINGER\" TEXT," + // 2: singer
                "\"ALBUM\" TEXT," + // 3: album
                "\"MUSIC_DIR\" TEXT," + // 4: musicDir
                "\"PATH\" TEXT," + // 5: path
                "\"SOUND\" INTEGER NOT NULL ," + // 6: sound
                "\"PLAYTIME\" TEXT," + // 7: playtime
                "\"SCANTIME\" TEXT," + // 8: scantime
                "\"IS_PRIZE\" INTEGER NOT NULL ," + // 9: isPrize
                "\"ALL_TIME_STR\" TEXT);"); // 10: allTimeStr
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MUSIC_SCANTIME_DESC ON \"MUSIC\"" +
                " (\"SCANTIME\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Music entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String singer = entity.getSinger();
        if (singer != null) {
            stmt.bindString(3, singer);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(4, album);
        }
 
        String musicDir = entity.getMusicDir();
        if (musicDir != null) {
            stmt.bindString(5, musicDir);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
        stmt.bindLong(7, entity.getSound());
 
        String playtime = entity.getPlaytime();
        if (playtime != null) {
            stmt.bindString(8, playtime);
        }
 
        String scantime = entity.getScantime();
        if (scantime != null) {
            stmt.bindString(9, scantime);
        }
        stmt.bindLong(10, entity.getIsPrize() ? 1L: 0L);
 
        String allTimeStr = entity.getAllTimeStr();
        if (allTimeStr != null) {
            stmt.bindString(11, allTimeStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String singer = entity.getSinger();
        if (singer != null) {
            stmt.bindString(3, singer);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(4, album);
        }
 
        String musicDir = entity.getMusicDir();
        if (musicDir != null) {
            stmt.bindString(5, musicDir);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
        stmt.bindLong(7, entity.getSound());
 
        String playtime = entity.getPlaytime();
        if (playtime != null) {
            stmt.bindString(8, playtime);
        }
 
        String scantime = entity.getScantime();
        if (scantime != null) {
            stmt.bindString(9, scantime);
        }
        stmt.bindLong(10, entity.getIsPrize() ? 1L: 0L);
 
        String allTimeStr = entity.getAllTimeStr();
        if (allTimeStr != null) {
            stmt.bindString(11, allTimeStr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // singer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // album
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // musicDir
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.getInt(offset + 6), // sound
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // playtime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // scantime
            cursor.getShort(offset + 9) != 0, // isPrize
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // allTimeStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSinger(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlbum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMusicDir(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSound(cursor.getInt(offset + 6));
        entity.setPlaytime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setScantime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsPrize(cursor.getShort(offset + 9) != 0);
        entity.setAllTimeStr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Music entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Music entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
